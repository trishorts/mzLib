using MzLibUtil;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace MassSpectrometry.Deconvolution.Parameters
{
    internal class FlashDeconvDeconvolutionParamters : DeconvolutionParameters
    {
        public override DeconvolutionType DeconvolutionType { get; protected set; } = DeconvolutionType.FlashDeconvOpenMsDeconvolution;

        // Add any specific parameters for FlashDeconv here
        // For example, you might have parameters like:
        
        ////Options
        //public string inFile { get; set; } // CLI uses -in Input file (mzML) (valid formats: 'mzML')
        //public string in_log { get; set; } // CLI uses -in_log Log file generated by FLASHIda (IDA*.log). Only needed for coupling with FLASHIda acquisition
        //public string outFile { get; set; } // CLI uses -out Default output tsv file containing deconvolved features (valid formats: 'tsv')
        //public string out_spec { get; set; } // Output tsv files containing deconvolved spectra (per MS level) (valid formats: 'tsv')
        //public string out_mzml { get; set; } // Output mzml file containing deconvolved spectra (of all MS levels) (valid formats: 'mzML')
        //public string out_annotated_mzml { get; set; } // Output mzml file containing annotated spectra. For each annotated peak, monoisotopic mass, charge, and isotope index are stored as meta data. Unannotated peaks are also copied as well without meta data. (valid formats: 'mzML')
        //public string out_promex { get; set; } // Output ms1ft (promex compatible) file containing deconvolved spectra. Only for MS1 level (valid formats: 'ms1ft')
        //public string out_topFD { get; set; } // Output msalign (topFD compatible) files containing deconvolved spectra (per MS level). The file name for MSn should end with msn.msalign to be able to be recognized by TopPIC GUI. For example, -out_topFD [name]_ms1.msalign [name]_ms2.msalign (valid formats: 'msalign')
        //public string out_topFD_feature { get; set; } // Output feature (topFD compatible) files containing deconvolved features (per MS level). The feature files are necessary for TopPIC feature intensity output (valid formats: 'feature')
        //public double min_precursor_snr { get; set; } // Minimum precursor SNR (SNR within the precursor envelope range) for identification. Similar to precursor interference level, but far more stringent as it also considers the isotope distribution shape of signal.When FLASHIda log file is used, this parameter is ignored. Applied only for topFD msalign outputs. (default: '1.0')
        //public int target_precursor_charge { get; set; } // Charge state of the target precursor. All precursor charge is fixed to this value. This parameter is useful for targeted studies where MS2 spectra are generated from a fixed precursor (e.g., Native-MS). This option also gives the maximum charge and masses (together with precursor m/z) of fragment ions, which overrides -Algorithm:max_charge and -Algorithm:max_mass. (default: '0')
        //public double target_precursor_mz { get; set; } // Target precursor m/z value. This option must be used with -target_precursor_charge option. Otherwise it will be ignored. If -target_precursor_charge option is used but this option is not used, the precursor m/z value written in MS2 spectra will be used by default. Together with -target_precursor_charge, this option overrides -Algorithm:max_mass. (default: '0.0')
        //public Charge mzml_mass_charge { get; set; } // Charge state of deconvolved masses in mzml output (specified by out_mzml) (default: '0') (min: '-1' max: '1')
        //public int preceding_MS1_count { get; set; } // Specifies the number of preceding MS1 spectra for MS2 precursor determination. In TDP, the precursor peak of a MS2 spectrum may not belong to any deconvolved masses in the MS1 spectrum immediately preceding the MS2 spectrum. Increasing this parameter to N allows for the search for the deconvolved masses in the N preceding MS1 spectra from the MS2 spectrum, increasing the chance that its precursor is deconvolved. (default: '3') (min: '1')
        //public bool write_detail { get; set; } // To write peak information per deconvolved mass in detail or not in tsv files for deconvolved spectra. If set to 1, all peak information (m/z, intensity, charge and isotope index) per mass is reported. (default: '0') (min: '0' max: '1')
        //public int max_MS_level { get; set; } // Maximum MS level (inclusive) for deconvolution. (default: '3') (min: '1')
        //public int forced_MS_level { get; set; } // If set to an integer N, MS level of all spectra will be set to N regardless of original MS level. Useful when deconvolving datasets containing only MS2 spectra. (default: '0') (min: '0')
        //public MergingMethod merging_method { get; set; } // Method for spectra merging before deconvolution. 0: No merging 1: Average gaussian method to perform moving gaussian averaging of spectra per MS level. Effective to increase proteoform ID sensitivity (in particular for Q-TOF datasets). 2: Block method to perform merging of all spectra into a single one per MS level (e.g., for NativeMS datasets) (default: '0') (min: '0' max: '2')
        //public bool report_FDR { get; set; } // Report qvalues (roughly, point-wise FDR) for deconvolved masses in the tsv files for deconvolved spectra. Dummy masses to calculate qvalues and FDR are also reported. Beta version. (default: '0') (min: '0' max: '1')
        //public bool use_RNA_averagine { get; set; } // If set to 1, RNA averagine model is used (default: '0') (min: '0' max: '1')

        //Algorithm
        public (double, double, double) Tol { get; set; } // Ppm tolerance for MS1, MS2, ...
        public double Min_mass { get; set; } // Minimum mass (Da) to consider
        public double Max_mass { get; set; } // Maximum mass (Da) to consider
        public int Min_charge { get; set; } // Minimum charge state for MS1 spectra (can be negative for negative mode)
        public int Max_charge { get; set; } // Maximum charge state for MS1 spectra (can be negative for negative mode)
        public double Min_mz { get; set; } // If set to positive value, minimum m/z to deconvolve.
        public double Max_mz { get; set; } // If set to positive value, maximum m/z to deconvolve.
        public double Min_rt { get; set; } // If set to positive value, minimum RT to deconvolve.
        public double Max_rt { get; set; } // If set to positive value, maximum RT to deconvolve.
        public double Isolation_window { get; set; } // Default isolation window with. If the input mzML file does not contain isolation window width information, this width will be used.
        public (double, double, double) Min_isotope_cosine { get; set; } // Cosine similarity thresholds between avg. and observed isotope patterns for MS1, 2, ... (e.g., -min_isotope_cosine 0.8 0.6 to specify 0.8 and 0.6 for MS1 and MS2, respectively)
        public int Allowed_isotope_error { get; set; } // Allowed isotope index error for decoy and qvalue report. If it is set to 1, for example, +-1 isotope errors are not counted as false. Beta version.
        public double Min_intensity { get; set; } // Intensity threshold

        ////FeatureTracing
        //public double mass_error_ppm { get; set; } //
        //public QuantMethod quant_method { get; set; } // Quantification method to use for feature tracing
        //public double min_sample_rate { get; set; } // Minimum fraction of scans along the feature trace that must contain a peak. To raise feature detection sensitivity, lower this value close to 0.
        //public double min_trace_length { get; set; } // Minimum expected length of a mass trace (in seconds).
        //public double max_trace_length { get; set; } // Maximum expected length of a mass trace (in seconds). Set to a negative value to disable maximal length check during mass trace detection.


        //// Common TOPP options
        //public string ini { get; set; } // Use the given TOPP INI file
        //public string log { get; set; } // Name of log file (created only when specified)
        //public int instance { get; set; } // Instance number for the TOPP INI file (default: '1')
        //public double debug { get; set; } // Sets the debug level (default: '0')
        //public int threads { get; set; } // Sets the number of threads allowed to be used by the TOPP tool (default: '1')
        //public string write_ini { get; set; } // Writes the default configuration file
        //public string write_ctd { get; set; } // Writes the common tool description file(s) (Toolname(s).ctd) to <out_dir>
        //public string write_nested_cwl { get; set; } // Writes the Common Workflow Language file(s) (Toolname(s).cwl) to <out_dir>
        //public string write_cwl { get; set; } // Writes the Common Workflow Language file(s) (Toolname(s).cwl) to <out_dir>, but enforce a flat parameter hierarchy
        //public string write_nested_json { get; set; } // Writes the default configuration file
        //public string write_json { get; set; } // Writes the default configuration file, but compatible to the flat hierarchy
        //public bool no_progress { get; set; } // Disables progress logging to command line
        //public bool force { get; set; } // Overrides tool-specific checks
        //public bool test { get; set; } // Enables the test mode (needed for internal use only)
        //// --help Shows options
        //// --helphelp Shows all options (including advanced)


        public FlashDeconvDeconvolutionParamters((double ms1, double ms2, double ms3)? tolerance = null, double minMass = 50, double maxMass = 1000000, int minCharge = 1, int maxCharge = 100, 
            double minMz = -1.0, double maxMz = -1.0, double minRt = -1.0, double maxRT = -1.0, double isolationWindow = 5.0, (double ms1, double ms2, double ms3)? minIsotopeCosine = null, 
            int allowedIsotopeError = 1, double minIntensity = 0.0, Polarity polarity = Polarity.Positive, AverageResidue? averageResidue = null) : base(minCharge, maxCharge, polarity, 
                averageResidue) 
        { 
            Tol = tolerance ?? (10.0, 10.0, 10.0); 
            Min_mass = minMass; Max_mass = maxMass; 
            Min_charge = minCharge; 
            Max_charge = maxCharge; 
            Min_mz = minMz; 
            Max_mz = maxMz; 
            Min_rt = minRt; 
            Max_rt = maxRT; 
            Isolation_window = isolationWindow; 
            Min_isotope_cosine = minIsotopeCosine ?? (0.85, 0.85, 0.85); 
            Allowed_isotope_error = allowedIsotopeError; 
            Min_intensity = minIntensity; 
        }


        /// <summary>
        /// Method of quantification for mass traces. For LC data 'area' is recommended, 'median' for direct injection data. 'max_height' simply uses the most intense peak in the trace.
        /// </summary>
        public enum QuantMethod
        {
            area,
            median,
            max_height
        }
        public enum Charge
        {
            negative = -1,
            uncharded = 0,
            positive = 1
        }
        public enum MergingMethod
        {
            None = 0,
            AverageGaussian = 1,
            Block = 2
        }
    }
}
